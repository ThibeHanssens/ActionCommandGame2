@page "/account/sign-in"
@attribute [AllowAnonymous]
@layout MinimalLayout
@using ActionCommandGame.BlazorApp.Security
@using Microsoft.AspNetCore.Authorization
@using ActionCommandGame.Services.Model.Requests
@inject NavigationManager NavigationManager
@inject IdentityService IdentityService
@inject ITokenStore TokenStore
@inject AuthenticationStateProvider AuthProvider

<div class="login-page container">
    <h2>Login</h2>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
        </div>
        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary w-100">Login</button>
    </EditForm>
    <div class="mt-3">
        <small>Don't have an account? <a href="@AppRoutes.Account.Register">Register here</a>.</small>
    </div>
</div>

@code {
    // Initialize the model so that required properties are set.
    private UserSignInRequest loginModel = new UserSignInRequest
        {
            Email = string.Empty,
            Password = string.Empty
        };

    private string ErrorMessage = string.Empty;

        protected override async Task OnInitializedAsync()
    {
        // clear any old token
        await TokenStore.SaveTokenAsync(null);
        // tell Blazor auth-state that we’re now logged out
        (AuthProvider as TokenAuthenticationStateProvider)
          ?.AuthenticateUser();
    }

    private async Task HandleLogin()
    {
        // Call the IdentityService to sign the user in.
        var result = await IdentityService.SignInAsync(loginModel);

        if (!result.Success)
        {
            // Display backend error messages above the form.
            ErrorMessage = string.Join(" ", result.Errors ?? new List<string>());
            return;
        }

       //Notify Blazor that a token is present now
        (AuthProvider as TokenAuthenticationStateProvider)?.AuthenticateUser();
        await AuthProvider.GetAuthenticationStateAsync();

        // Clear error and navigate to player selection.
        ErrorMessage = string.Empty;
        NavigationManager.NavigateTo(AppRoutes.Player.PlayerSelection);
    }
}
