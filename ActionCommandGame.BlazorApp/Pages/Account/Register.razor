@page "/account/register"
@attribute [AllowAnonymous]
@layout MinimalLayout
@using ActionCommandGame.BlazorApp.Security
@using Microsoft.AspNetCore.Authorization
@using ActionCommandGame.Services.Model.Requests
@inject NavigationManager NavigationManager
@inject IdentityService IdentityService
@inject ITokenStore TokenStore
@inject AuthenticationStateProvider AuthProvider

<div class="register-page container">
    <h2>Register</h2>
    @if (!string.IsNullOrWhiteSpace(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
        </div>
        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText id="password" type="password" @bind-Value="registerModel.Password" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary w-100">Register</button>
    </EditForm>
    <div class="mt-3">
        <small>Already have an account? <a href="@AppRoutes.Account.SignIn">Login here</a>.</small>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        // clear any old token
        await TokenStore.SaveTokenAsync(null);
        // tell Blazor auth-state that we’re now logged out
        (AuthProvider as TokenAuthenticationStateProvider)
          ?.AuthenticateUser();
    }

    // Initialize the model so that required properties are set.
    private UserRegistrationRequest registerModel = new UserRegistrationRequest
        {
            Email = string.Empty,
            Password = string.Empty
        };

    private string ErrorMessage = string.Empty;

    private async Task HandleRegister()
    {
        // Client-side validation for the password requirements.
        var pwdError = GetPasswordValidationError(registerModel.Password);
        if (pwdError != null)
        {
            ErrorMessage = pwdError;
            return;
        }

        // Call the IdentityService to register the user.
        var result = await IdentityService.RegisterAsync(registerModel);

        if (!result.Success)
        {
            // Display the error messages above the form.
            ErrorMessage = string.Join(" ", result.Errors ?? new List<string>());
            return;
        }

       //Notify Blazor that a token is present now
        (AuthProvider as TokenAuthenticationStateProvider)?.AuthenticateUser();
        await AuthProvider.GetAuthenticationStateAsync();

        // Clear error message and navigate to player selection.
        ErrorMessage = string.Empty;
        NavigationManager.NavigateTo(AppRoutes.Player.PlayerSelection);
    }

    /// <summary>
    /// Returns null if the password is valid; otherwise returns a specific error message.
    /// </summary>
    private string? GetPasswordValidationError(string password)
    {
        if (password?.Length < 6)
            return "Password must contain at least 6 characters.";

        var missing = new List<string>();
        if (!password.Any(char.IsUpper)) missing.Add("one uppercase letter");
        if (!password.Any(char.IsLower)) missing.Add("one lowercase letter");
        if (!password.Any(char.IsDigit)) missing.Add("one digit");

        if (missing.Count == 0)
            return null;

        if (missing.Count == 1)
            return $"Password must contain at least {missing[0]}.";
        if (missing.Count == 2)
            return $"Password must contain at least {missing[0]} and {missing[1]}.";
        return $"Password must contain at least {missing[0]}, {missing[1]} and {missing[2]}.";
    }
}
